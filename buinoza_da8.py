# -*- coding: utf-8 -*-
"""Buinoza_DA8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VKWrZqh6VpMzCST3e2A7ZCFTPAUmxOa8

<center><font size="6"><b>–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –ø—Ä–∞–∫—Ç–∏–∫—É–º 8.

<center><b> –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—à–±–æ—Ä–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Streamlit </font>
"""

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ Streamlit (–Ω–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –≤ .py —Ñ–∞–π–ª –¥–æ–¥–∞—Ç–∫—É)
!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import altair as alt

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

df = pd.read_csv('HR_comma_sep.csv')

df.info()

df.describe()

missing_data = df.isnull()
for column in missing_data.columns.values.tolist():
    print(column)
    print (missing_data[column].value_counts())
    print("")

st.set_page_config(
    page_title="HR Insight Dashboard",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://docs.streamlit.io/',
        'Report a bug': 'https://github.com/streamlit/streamlit/issues',
        'About': '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —ñ —Ä–∏–∑–∏–∫—É –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è'
    }
)

# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å / SIDEBAR
st.sidebar.title("–ü–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –æ–ø–∏—Å
st.sidebar.markdown("üîç **–§—ñ–ª—å—Ç—Ä—É–π—Ç–µ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ –æ–∑–Ω–∞–∫–∞–º–∏:**")
st.sidebar.markdown("–¶–µ–π –¥–∞—à–±–æ—Ä–¥ –¥–æ–ø–æ–º–∞–≥–∞—î –¥–æ—Å–ª—ñ–¥–∏—Ç–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å, –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–∏–∑–∏–∫–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω—å –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö.")

# 1. –í–∏–±—ñ—Ä –æ–¥–Ω–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É
selected_department = st.sidebar.selectbox(
    "–û–±–µ—Ä—ñ—Ç—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:",
    sorted(df["Department"].unique())
)

# 2. –í–∏–±—ñ—Ä –∫—ñ–ª—å–∫–æ—Ö —Ä—ñ–≤–Ω—ñ–≤ –∑–∞—Ä–ø–ª–∞—Ç–∏
selected_salary = st.sidebar.multiselect(
    "–†—ñ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç–∏:",
    options=df["salary"].unique(),
    default=df["salary"].unique()
)

# 3. –†–∞–¥—ñ–æ-–∫–Ω–æ–ø–∫–∏: —Å—Ç–∞—Ç—É—Å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
status_filter = st.sidebar.radio(
    "–°—Ç–∞—Ç—É—Å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:",
    ["–£—Å—ñ", "–ü—Ä–∞—Ü—é—î", "–ó–≤—ñ–ª—å–Ω–∏–≤—Å—è"]
)

# 4. –ü—Ä–∞–ø–æ—Ä–µ—Ü—å: —Ç—ñ–ª—å–∫–∏ –±–µ–∑ –Ω–µ—â–∞—Å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
filter_accident_free = st.sidebar.checkbox("ü©∫ –õ–∏—à–µ –±–µ–∑ –Ω–µ—â–∞—Å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤")

# 5. –°–ª–∞–π–¥–µ—Ä: –æ–±–º–µ–∂–∏—Ç–∏ —Å—Ç–∞–∂
max_years = int(df["time_spend_company"].max())
selected_years = st.sidebar.slider(
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å—Ç–∞–∂ (—Ä–æ–∫–∏ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó):",
    min_value=1,
    max_value=max_years,
    value=max_years
)

# 6. –í–∏–±—ñ—Ä —Ç–∏–ø—É –≥—Ä–∞—Ñ—ñ–∫–∞
chart_option = st.sidebar.radio(
    "üìä –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
    [
        "–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–º—ñ–Ω–Ω–∏—Ö (scatter + —Ç—Ä–µ–Ω–¥)",
        "–ü—Ä–æ—Ñ—ñ–ª—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É (—Ä–∞–¥–∞—Ä)",
        "–°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø–æ —Ä–æ–∫–∞—Ö —É –∫–æ–º–ø–∞–Ω—ñ—ó"
    ]
)

# –ê–≤—Ç–æ—Ä —ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
st.sidebar.markdown("---")
st.sidebar.markdown("**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:** \n–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É —Ç–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.")
st.sidebar.markdown("üë©‚Äçüíª **–ê–≤—Ç–æ—Ä**: –ë—É–π–Ω–æ–∑–∞ –û–ª–µ–Ω–∞ :)")

# –°—Ç–≤–æ—Ä—é—î–º–æ df_filtered –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
df_filtered = df[
    (df["Department"] == selected_department) &
    (df["salary"].isin(selected_salary)) &
    (
        (status_filter == "–£—Å—ñ") |
        ((status_filter == "–ü—Ä–∞—Ü—é—î") & (df["left"] == 0)) |
        ((status_filter == "–ó–≤—ñ–ª—å–Ω–∏–≤—Å—è") & (df["left"] == 1))
    ) &
    ((df["Work_accident"] == 0) if filter_accident_free else True) &
    (df["time_spend_company"] <= selected_years)
]

# –í–∏–≤–µ–¥–µ–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É (–æ–ø—Ü—ñ–π–Ω–æ)
st.write(f"üìã –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(df_filtered)} –∑–∞–ø–∏—Å—ñ–≤.")

# –ë–ª–æ–∫ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
st.sidebar.markdown("üî¨ **–ü–æ–±—É–¥–æ–≤–∞ –º–æ–¥–µ–ª—ñ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó**")
st.sidebar.markdown("–û–±–µ—Ä—ñ—Ç—å –æ–∑–Ω–∞–∫–∏, –∑–∞ —è–∫–∏–º–∏ –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏–º–µ, —á–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –∑–≤—ñ–ª—å–Ω–∏—Ç—å—Å—è.")

# –û–±–∏—Ä–∞—î–º–æ –ª–∏—à–µ —á–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏, –æ–∫—Ä—ñ–º 'left'
numeric_columns = df_filtered.select_dtypes(include=np.number).columns.tolist()
if 'left' in numeric_columns:
    numeric_columns.remove('left')  # –±–æ —Ü–µ —Ü—ñ–ª—å

# –í–∏–±—ñ—Ä –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –º–æ–¥–µ–ª—ñ
selected_features = st.sidebar.multiselect(
    "–û–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª—ñ (X):",
    options=numeric_columns,
    default=["satisfaction_level", "last_evaluation"]
)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–±—É–¥–æ–≤–∏ –º–æ–¥–µ–ª—ñ
build_model = st.sidebar.checkbox("üîç –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó")

# –û—Å–Ω–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å

st.title("üìä HR Insight Dashboard")
st.subheader(f"üîç –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {df_filtered.shape[0]} –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")

# –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV
csv = df_filtered.to_csv(index=False).encode("utf-8")
st.download_button(
    label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
    data=csv,
    file_name="filtered_employees.csv",
    mime="text/csv"
)

# –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
st.subheader("–û–±–µ—Ä—ñ—Ç—å, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏")

all_columns = df_filtered.columns.tolist()
default_columns = [
    "Department", "salary", "satisfaction_level",
    "last_evaluation", "average_monthly_hours",
    "time_spend_company", "left"
]

selected_columns = st.multiselect(
    "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
    options=all_columns,
    default=[col for col in default_columns if col in all_columns]
)

if selected_columns:
    st.dataframe(df_filtered[selected_columns])
else:
    st.info("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å—Ç–æ–≤–ø–µ—Ü—å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é.")



# –ì—Ä–∞—Ñ—ñ–∫–∏

if chart_option == "–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–º—ñ–Ω–Ω–∏—Ö (scatter + —Ç—Ä–µ–Ω–¥)":
    st.subheader("üìä –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –º—ñ–∂ –¥–≤–æ–º–∞ –∑–º—ñ–Ω–Ω–∏–º–∏")

    x_var = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É –¥–ª—è –æ—Å—ñ X:", df_filtered.select_dtypes(include=np.number).columns)
    y_var = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É –¥–ª—è –æ—Å—ñ Y:", df_filtered.select_dtypes(include=np.number).columns)

    fig = px.scatter(df_filtered, x=x_var, y=y_var, color=df_filtered["left"].map({0: "–ü—Ä–∞—Ü—é—î", 1: "–ó–≤—ñ–ª—å–Ω–∏–≤—Å—è"}))
    fig.update_traces(marker=dict(size=8))
    fig.update_layout(title=f"–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å {y_var} –≤—ñ–¥ {x_var}", legend_title="–°—Ç–∞—Ç—É—Å")
    st.plotly_chart(fig, use_container_width=True)

elif chart_option == "–ü—Ä–æ—Ñ—ñ–ª—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É (—Ä–∞–¥–∞—Ä)":
    st.subheader("üìä –ü—Ä–æ—Ñ—ñ–ª—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É")

    radar_metrics = ["satisfaction_level", "last_evaluation", "average_monthly_hours", "time_spend_company"]
    dept_data = df_filtered[radar_metrics].mean().values.tolist()
    overall_data = df[radar_metrics].mean().values.tolist()

    radar_df = pd.DataFrame({
        "–ú–µ—Ç—Ä–∏–∫–∞": radar_metrics,
        "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç": dept_data,
        "–ó–∞–≥–∞–ª–æ–º": overall_data
    })

    fig = px.line_polar(radar_df, r="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", theta="–ú–µ—Ç—Ä–∏–∫–∞", line_close=True, name="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç")
    fig.add_scatterpolar(r=radar_df["–ó–∞–≥–∞–ª–æ–º"], theta=radar_df["–ú–µ—Ç—Ä–∏–∫–∞"], mode="lines", name="–ó–∞–≥–∞–ª–æ–º")
    st.plotly_chart(fig, use_container_width=True)

elif chart_option == "–°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø–æ —Ä–æ–∫–∞—Ö —É –∫–æ–º–ø–∞–Ω—ñ—ó":
    st.subheader("üìà –°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø–æ —Å—Ç–∞–∂—É (—Ä–æ–∫–∞—Ö —É –∫–æ–º–ø–∞–Ω—ñ—ó)")

    metric_choice = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫:", [
        "satisfaction_level", "last_evaluation", "average_monthly_hours", "left"
    ])

    grouped = df_filtered.groupby("time_spend_company")[metric_choice].mean().reset_index()
    fig = px.line(grouped, x="time_spend_company", y=metric_choice, markers=True,
                  labels={"time_spend_company": "–†–æ–∫–∏ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó", metric_choice: "–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è"},
                  title=f"{metric_choice} –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–∂—É")
    st.plotly_chart(fig, use_container_width=True)

# –ü–æ–±—É–¥–æ–≤–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ
if build_model:
    st.subheader("üîç –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è: –ø—Ä–æ–≥–Ω–æ–∑ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è")

    if selected_features and "left" in df_filtered.columns:
        df_model = df_filtered[selected_features + ["left"]].dropna()

        if df_model.shape[0] >= 10:
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è X —Ç–∞ y
            X = df_model[selected_features]
            y = df_model["left"]

            # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—É —ñ —Ç–µ—Å—Ç–æ–≤—É –≤–∏–±—ñ—Ä–∫–∏
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

            # –ü–æ–±—É–¥–æ–≤–∞ –º–æ–¥–µ–ª—ñ
            model = LogisticRegression()
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)
            accuracy = model.score(X_test, y_test)

            # –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            st.markdown(f"**–¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ:** {accuracy:.2%}")
            st.markdown("**–ú–∞—Ç—Ä–∏—Ü—è –ø–æ–º–∏–ª–æ–∫:**")
            st.write(confusion_matrix(y_test, y_pred))

            # –ó–≤—ñ—Ç
            report = classification_report(y_test, y_pred, output_dict=True)
            st.markdown("**–ó–≤—ñ—Ç –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:**")
            st.dataframe(pd.DataFrame(report).transpose())

        else:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –º–æ–¥–µ–ª—ñ (–º—ñ–Ω—ñ–º—É–º 10 —Ä—è–¥–∫—ñ–≤).")
    else:
        st.warning("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –æ–∑–Ω–∞–∫—É –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –º–æ–¥–µ–ª—ñ.")

"""##<center>__–°–∞–º–æ—Å—Ç—ñ–π–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è__</center>

> –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –±–ª–æ–∫ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –≤ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª ***LastName_DA8.py***

> –Ü–Ω—Å—Ç–∞–ª—é–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞–∫–µ—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫ Python –∑–±–µ—Ä–µ–∂—ñ—Ç—å —É —Ñ–∞–π–ª `requirements.txt`

> –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ–≥–æ –±–∞–Ω–∫—É –¥–∞–Ω–∏—Ö, –∑ —è–∫–∏–º –±—É–¥–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ `data.csv`

### –ó–∞–≤–¥–∞–Ω–Ω—è

1. –°—Ç–≤–æ—Ä—ñ—Ç—å dashboard, —è–∫ –¥–æ–¥–∞—Ç–æ–∫ —É **Streamlit Community Cloud**
2. –î–æ–¥–∞—Ç–æ–∫ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏: –ø–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
- –ó–∞–≥–æ–ª–æ–≤–æ–∫      
- –¢–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å / —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó                       
- –û–¥–∏–Ω –≤–∏–±—ñ—Ä –∑—ñ —Å–ø–∏—Å–∫—É                              
- –ö—ñ–ª—å–∫–∞ –≤–∏–±–æ—Ä—ñ–≤                                   
- –í–∏–±—ñ—Ä –æ–¥–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –∑ –¥–µ–∫—ñ–ª—å–∫–æ—Ö (—Ä–∞–¥—ñ–æ-–∫–Ω–æ–ø–∫–∏)  
- –ü—Ä–∞–ø–æ—Ä–µ—Ü—å        
3. –í –≥–æ–ª–æ–≤–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ: —Ç–∞–±–ª–∏—Ü—è, —è–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤–∏–±–æ—Ä—É –∫–æ–ª–æ–Ω–æ–∫
4. –ì—Ä–∞—Ñ—ñ—á–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è (–º—ñ–Ω—ñ–º—É–º 3 —Ç–∏–ø–∏ –≥—Ä–∞—Ñ—ñ–∫–∏)
5. –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ –∞–±–æ —ñ–Ω—à–∏—Ö (–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó/–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó)                        
6. –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω—ñ –≤ —Ä–µ–ø—Ä–æ–∑–∏—Ç–æ—Ä—ñ—ó GitHub, —Ç–∞ —ñ–º–ø–ª–µ–º–µ–Ω—Ç—É–≤–∞—Ç–∏—Å—è –≤ Streamlit Community Cloud
"""