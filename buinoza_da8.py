# -*- coding: utf-8 -*-
"""Buinoza_DA8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VKWrZqh6VpMzCST3e2A7ZCFTPAUmxOa8

<center><font size="6"><b>–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –ø—Ä–∞–∫—Ç–∏–∫—É–º 8.

<center><b> –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—à–±–æ—Ä–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Streamlit </font>
"""
import streamlit as st
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import altair as alt
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.cluster import KMeans  
from sklearn.preprocessing import StandardScaler  

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
df = pd.read_csv('HR_comma_sep.csv')
df.rename(columns={"average_montly_hours": "average_monthly_hours"}, inplace=True)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="HR Insight Dashboard",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://docs.streamlit.io/',
        'Report a bug': 'https://github.com/streamlit/streamlit/issues',
        'About': '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —ñ —Ä–∏–∑–∏–∫—É –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è'
    }
)

# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å / SIDEBAR
st.sidebar.title("–ü–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
st.sidebar.markdown("üîç **–§—ñ–ª—å—Ç—Ä—É–π—Ç–µ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ –æ–∑–Ω–∞–∫–∞–º–∏:**")
st.sidebar.markdown("–¶–µ–π –¥–∞—à–±–æ—Ä–¥ –¥–æ–ø–æ–º–∞–≥–∞—î –¥–æ—Å–ª—ñ–¥–∏—Ç–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å, –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–∏–∑–∏–∫–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω—å –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö.")

selected_departments = st.sidebar.multiselect(
    "–û–±–µ—Ä—ñ—Ç—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏:",
    options=sorted(df["Department"].unique()),
    default=sorted(df["Department"].unique())
)

salary_options = ["–£—Å—ñ"] + sorted(df["salary"].unique())
selected_salary = st.sidebar.selectbox("–†—ñ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç–∏:", salary_options)

status_filter = st.sidebar.radio("–°—Ç–∞—Ç—É—Å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", ["–£—Å—ñ", "–ü—Ä–∞—Ü—é—î", "–ó–≤—ñ–ª—å–Ω–∏–≤—Å—è"])

filter_accident_free = st.sidebar.checkbox("ü©∫ –õ–∏—à–µ –±–µ–∑ –Ω–µ—â–∞—Å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤")

max_years = int(df["time_spend_company"].max())
selected_years = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å—Ç–∞–∂ (—Ä–æ–∫–∏ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó):", 1, max_years, max_years)

chart_option = st.sidebar.radio(
    "üìä –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
    [
        "–ö–æ—Ä–µ–ª—è—Ü—ñ—è",
        "–û–≥–ª—è–¥ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É/—ñ–≤",
        "–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤"
    ]
)

st.sidebar.markdown("---")
st.sidebar.markdown("**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:** \n–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É —Ç–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.")
st.sidebar.markdown("üë©‚Äçüíª **–ê–≤—Ç–æ—Ä**: –ë—É–π–Ω–æ–∑–∞ –û–ª–µ–Ω–∞")

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
filtered = df[
    df["Department"].isin(selected_departments) &
    ((df["salary"] == selected_salary) if selected_salary != "–£—Å—ñ" else True) &
    (
        (status_filter == "–£—Å—ñ") |
        ((status_filter == "–ü—Ä–∞—Ü—é—î") & (df["left"] == 0)) |
        ((status_filter == "–ó–≤—ñ–ª—å–Ω–∏–≤—Å—è") & (df["left"] == 1))
    ) &
    ((df["Work_accident"] == 0) if filter_accident_free else True) &
    (df["time_spend_company"] <= selected_years)
]

st.title("üìä HR Insight Dashboard")
st.subheader(f"üîç –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered)} –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")

csv = filtered.to_csv(index=False).encode("utf-8")
st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", csv, "filtered_employees.csv", "text/csv")

# –¢–∞–±–ª–∏—Ü—è
st.subheader("–û–±–µ—Ä—ñ—Ç—å, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏")
all_columns = filtered.columns.tolist()
def_columns = ["Department", "salary", "satisfaction_level", "last_evaluation", "average_monthly_hours", "time_spend_company", "left"]
selected_cols = st.multiselect("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", all_columns, default=[c for c in def_columns if c in all_columns])

if selected_cols:
    st.dataframe(filtered[selected_cols])
else:
    st.info("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å—Ç–æ–≤–ø–µ—Ü—å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é.")

# –ì—Ä–∞—Ñ—ñ–∫–∏
if chart_option == "–ö–æ—Ä–µ–ª—è—Ü—ñ—è":
    st.header("üîé Heatmap –∫–æ—Ä–µ–ª—è—Ü—ñ—ó")
    numeric_cols = filtered.select_dtypes(include='number').columns.tolist()
    
    x_col = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É X", numeric_cols, index=0)
    y_col = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É Y", numeric_cols, index=1)
    
    if st.button("–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫"):
        df_plot = filtered[[x_col, y_col]].dropna()
        
        corr = df_plot.corr()
        
        fig, ax = plt.subplots(figsize=(5, 4))
        sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax, vmin=-1, vmax=1)
        ax.set_title(f"–ö–æ—Ä–µ–ª—è—Ü—ñ—è –º—ñ–∂ {x_col} —Ç–∞ {y_col}")
        st.pyplot(fig)
# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫
elif chart_option == "–û–≥–ª—è–¥ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É/—ñ–≤":
    st.subheader("–û–≥–ª—è–¥ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É/—ñ–≤")
    total_employees = len(filtered)
    left_employees = filtered["left"].sum()
    turnover_rate = (left_employees / total_employees) * 100 if total_employees else 0
    avg_satisfaction = filtered["satisfaction_level"].mean()
    avg_projects = filtered["number_project"].mean()
    avg_hours = filtered["average_monthly_hours"].mean()
    st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", total_employees)
        st.metric("üìå –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ—î–∫—Ç—ñ–≤", f"{avg_projects:.2f}")
    with col2:
        st.metric("üëã –ó–≤—ñ–ª—å–Ω–∏–ª–æ—Å—è", left_employees)
        st.metric("‚è± –°–µ—Ä–µ–¥–Ω—ñ –≥–æ–¥–∏–Ω–∏/–º—ñ—Å", f"{avg_hours:.1f}")
    with col3:
        st.metric("üìâ –†—ñ–≤–µ–Ω—å –ø–ª–∏–Ω–Ω–æ—Å—Ç—ñ", f"{turnover_rate:.1f}%")
        st.metric("üòä –°–µ—Ä–µ–¥–Ω—è –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å", f"{avg_satisfaction:.2f}")



        # –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ—Å—Ç—ñ
    st.subheader("üòä –†–æ–∑–ø–æ–¥—ñ–ª —Ä—ñ–≤–Ω—è –∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ—Å—Ç—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")
    fig = px.histogram(
        filtered,
        x="satisfaction_level",
        nbins=20,
        title="–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ—Å—Ç—ñ",
        labels={"satisfaction_level": "–†—ñ–≤–µ–Ω—å –∑–∞–¥–æ–≤–æ–ª–µ–Ω–æ—Å—Ç—ñ", "–ö-—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤"}
    )
    fig.update_layout(bargap=0.1)
    st.plotly_chart(fig, use_container_width=True)



elif chart_option == "–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤":
    st.subheader("üìä –†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏")
    dept_share = filtered["Department"].value_counts(normalize=True).reset_index()
    dept_share.columns = ["–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", "–ß–∞—Å—Ç–∫–∞"]
    fig1 = px.pie(dept_share, values="–ß–∞—Å—Ç–∫–∞", names="–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", title="–ß–∞—Å—Ç–∫–∞ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö", hole=0.4)
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("üí∞ –†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑–∞ —Ä—ñ–≤–Ω–µ–º –∑–∞—Ä–ø–ª–∞—Ç–∏")
    sal_share = filtered["salary"].value_counts(normalize=True).reset_index()
    sal_share.columns = ["–†—ñ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç–∏", "–ß–∞—Å—Ç–∫–∞"]
    fig2 = px.pie(sal_share, values="–ß–∞—Å—Ç–∫–∞", names="–†—ñ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç–∏", title="–ß–∞—Å—Ç–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç—ñ", hole=0.4)
    st.plotly_chart(fig2, use_container_width=True)

# –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∞ –º–æ–¥–µ–ª—å
st.sidebar.markdown("üî∑ **–ü–æ–±—É–¥–æ–≤–∞ –º–æ–¥–µ–ª—ñ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó**")
cluster_features = st.sidebar.multiselect(
    "–û–±–µ—Ä—ñ—Ç—å –æ–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó (X):", 
    options=numeric_cols, 
    default=["satisfaction_level", "last_evaluation"]
)
n_clusters = st.sidebar.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (K):", 2, 10, 3)

build_cluster_model = st.sidebar.checkbox("üîç –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó")

if build_cluster_model:
    if cluster_features and len(filtered) >= 10:
        df_cluster = filtered[cluster_features].dropna()
        
        if len(df_cluster) < 10:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó (–º—ñ–Ω—ñ–º—É–º 10 —Ä—è–¥–∫—ñ–≤).")
        else:
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(df_cluster)
            
            kmeans = KMeans(n_clusters=n_clusters, random_state=42)
            clusters = kmeans.fit_predict(X_scaled)
            
            df_cluster = df_cluster.copy()
            df_cluster["Cluster"] = clusters
            
            st.subheader("üìä –ö–ª–∞—Å—Ç–µ—Ä–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤")
            st.dataframe(df_cluster)
            
            if len(cluster_features) >= 2:
                fig, ax = plt.subplots(figsize=(8, 5))
                scatter = ax.scatter(
                    df_cluster[cluster_features[0]], 
                    df_cluster[cluster_features[1]], 
                    c=clusters, cmap='Set2', alpha=0.7
                )
                ax.set_xlabel(cluster_features[0])
                ax.set_ylabel(cluster_features[1])
                ax.set_title("–ö–ª–∞—Å—Ç–µ—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±—Ä–∞–Ω–∏—Ö –æ–∑–Ω–∞–∫")
                legend1 = ax.legend(*scatter.legend_elements(), title="–ö–ª–∞—Å—Ç–µ—Ä–∏")
                ax.add_artist(legend1)
                st.pyplot(fig)
            else:
                st.info("–î–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 –æ–∑–Ω–∞–∫–∏.")
    else:
        st.warning("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É –æ–∑–Ω–∞–∫—É –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ—ñ–ª—å—Ç—Ä –Ω–µ –ø—É—Å—Ç–∏–π.")
